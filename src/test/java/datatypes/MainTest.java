/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package datatypes;

import org.junit.Test;
import static org.junit.Assert.*;

/*
 * Problem 1
 * 
 * Design a module to handle hierarchical configuration
 * Eg: there may some default config, eg: timeout = 1000
 * there may be some prod specific config, eg: baseUrl = abc
 * there may be dev configs which inherits from prod, eg: baseUrl = xyz
 * like this there may be any number of levels (eg, local config)
 * 
 * We need to be able to set any config (dev / prod)
 * 
 * Then query a value, and it should return the proper value
 * as per the inheritance
 * 
 * Each set of configuration is stored in a Map<String, String>
 * 
 * Eg: 
 * if env = DEV
 *   query("baseUrl") -> xyz
 *   query("timeout") -> 1000
 * if env = PROD
 *   query("baseUrl") -> abc
 *   query("timeout") -> 1000
 * if no env set
 *   query("baseUrl") -> error
 *   query("timeout") -> 1000
 */

/* 
 * Problem 2
 * 
 * Given a set of config json files (see example files in src/main/resources/config)
 * then write a script (with main() method) which takes an environment name in
 * command line param and generates a file to set the environment variables
 * 
 * Inheritance order is local -> dev -> prod -> default
 * 
 * So if we run on the example config json in src/main/resources/config:
 * 
 * java -jar createconfig.jar local
 * 
 * will output to the terminal (order of variables does not matter)
 * 
 * export AZURE_CLIENT_ID=azureDevId
 * export AZURE_CLIENT_SECRET=azureDevSecret
 * export AZURE_BASE_URL=http://azure.microsoft.com
 * export AZURE_TIMEOUT=1000
 * export SCAC_TIMEOUT=60000
 * export SCAC_BASE_URL=http://dev.scac.ford.com
 * 
 * Each environment variable name will be in uppercase with filename first and
 * then the config key in underscore separated format.
 * 
 * eg: if the file azure.json is having a key "baseUrl" and value "xyz" then
 * the generated line is 
 * 
 * export AZURE_BASE_URL=xyz
 * 
 */

public class MainTest {
    @Test public void test() {
        fail();
    }
}
